# -*- coding: utf-8 -*-
"""Face_Detection (1) (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QsiOH1mdWN9ig6nAK6cwUx2jcDHtjbGg
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import cv2
from google.colab.patches import cv2_imshow
face_classifier=cv2.CascadeClassifier("/content/drive/MyDrive/haarcascade_frontalface_default.xml")
image=cv2.imread("/content/drive/MyDrive/thor1.jpg")
gray=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
faces=face_classifier.detectMultiScale(image,1.3,5)
if faces is ():
  print("no face found")

for (x,y,w,h) in faces:
  cv2.rectangle(image,(x,y),(x+w,y+h),(127,0,255),2)
  cv2_imshow(image)
  cv2.waitKey(0)

cv2.destroyAllWindows()

import numpy as np
import cv2
from google.colab.patches import cv2_imshow
#we point OpenCV`s cascadeClassfier function to where our
#classifier (XML file format ) is stored

#face_classifier = cv2.CascadeClassifier('Haarcascades/haarcascade_frontalface_default.xml')
face_classifier = cv2.CascadeClassifier('/content/drive/MyDrive/haarcascade_frontalface_default.xml')
#load our image then convert it to grayscale

image = cv2.imread('/content/drive/MyDrive/thor1.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

#our classifier returns the ROI of the detected face as a tuple
#it stores the top left coordinate and the bottom right coordinates

#faces = face_classifier.detectMultiScale(gray, 1.3, 5)
faces = face_classifier.detectMultiScale(gray, 1.3, 5)

# when no faces detected , face_classifier returns and empty tuple
if faces == ():
    print("No faces found")

#we iterete through our faces array and draw a rectangle
#over each face in faces
for (x,y,w,h) in faces:
    cv2.rectangle(image,(x,y),(x+w,y+h),(127,0,255),2)
    cv2_imshow(image)
    cv2.waitKey(0)

cv2.destroyAllWindows()

import numpy as np
import cv2
from google.colab.patches import cv2_imshow

from google.colab.patches import cv2_imshow
face_classifier=cv2.CascadeClassifier("/content/drive/MyDrive/haarcascade_frontalface_default.xml")
eye_classifier=cv2.CascadeClassifier("/content/drive/MyDrive/haarcascade_eye.xml")
image=cv2.imread("/content/drive/MyDrive/thor1.jpg")
gray=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
faces=face_classifier.detectMultiScale(image,1.3,5)

if faces == ():
    print("No faces found")

for (x,y,w,h)in faces:
    cv2.rectangle(image,(x,y),(x+w,y+h),(127,0,255),2)
    roi_gray = gray[y:y+h, x:x+w]
    roi_color = image[y:y+h, x:x+w]
    eyes = eye_classifier.detectMultiScale(roi_gray)

    for (ex,ey,ew,eh) in eyes:
        cv2.rectangle(roi_color, (ex,ey), (ex+ew, ey+eh), (0,255,0),2)
        cv2_imshow(image)
        cv2.waitKey(0)

cv2.destroyAllWindows()

import numpy as np
import cv2
from google.colab.patches import cv2_imshow
face_classifier=cv2.CascadeClassifier("/content/drive/MyDrive/haarcascade_frontalface_default.xml")
eye_classifier=cv2.CascadeClassifier("/content/drive/MyDrive/haarcascade_eye.xml")
image=cv2.imread("/content/drive/MyDrive/thor1.jpg")
gray=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
faces=face_classifier.detectMultiScale(image,1.3,5)
if faces is ():
  print("no face found")

for (x,y,w,h) in faces:
  cv2.rectangle(image,(x,y),(x+w,y+h),(127,0,255),2)
  cv2_imshow(image)
  cv2.waitKey(0)
  roi_gray=gray[y:y+h,x:x+w]
  roi_color=image[y:y+h,x:x+w]
  eyes=eye_classifier.detectMultiScale(roi_gray)
  for (cx,cy,cw,ch) in eyes:
    cv2.rectangle(roi_color,(cx,cy),(cx+cw,cy+ch),(255,255,0),2)
    cv2_imshow(image)

cv2.destroyAllWindows()